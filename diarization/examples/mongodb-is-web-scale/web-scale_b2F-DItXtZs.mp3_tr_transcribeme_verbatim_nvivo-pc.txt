00:00:00,309 - 00:00:07,074	 And in conclusion, we have found MySQL to be an excellent database for our website. Any questions?	S1
00:00:07,074 - 00:00:18,038	 Yes. I have a question. Why didn't you use MongoDB? MongoDB is a web-scale database and doesn't use SQL or joins, so it's high performance.	S2
00:00:18,038 - 00:00:33,102	 That's an excellent question. We evaluated several NoSQL databases and concluded that the options are still too immature for our production needs. MySQL has a proven database that is used across the web, and it has the features we need.	S1
00:00:33,102 - 00:00:41,074	 But it doesn't scale. Everybody knows that relational databases don't scale because they use joins and write to disk.	S2
00:00:41,074 - 00:00:46,217	 Scalability is a complicated topic, and it's hard to make a general statement like that.	S1
00:00:46,217 - 00:00:54,449	 Relational databases weren't built for web scale. MongoDB handles web scale. You turn it on, and it scales right up.	S2
00:00:54,449 - 00:01:02,096	 It may surprise you that there are a handful of high-profile websites still using relational databases and in particular, MySQL.	S1
00:01:02,096 - 00:01:05,038	 Relational databases have impotence mismatch.	S2
00:01:05,038 - 00:01:07,239	 I think you mean impedance.	S1
00:01:07,239 - 00:01:14,612	 MySQL is slow as a dog. MongoDB will run circles around MySQL because MongoDB is web scale.	S2
00:01:14,612 - 00:01:35,879	 MongoDB does have some impressive benchmarks, but they do some interesting things to get those numbers. For example, when you write to MongoDB, you don't actually write anything. You stage your data to be written at a later time. If there's a problem writing your data, you're fucked. Does that sound like a good design to you?	S1
00:01:35,879 - 00:01:42,782	 If that's what they need to do to get those kick-ass benchmarks, then it's a great design.	S2
00:01:42,782 - 00:01:51,831	 If you were stupid enough to totally ignore [their?] ability just to get benchmarks, I suggest you pipe your data to /dev/null. It will be very fast.	S1
00:01:51,831 - 00:01:56,246	 If /dev/null is fast than web scale, I will use it. Is it web scale?	S2
00:01:56,246 - 00:02:13,042	 You are kidding me, right? I was making a joke. I mean, if you're happy writing to a database, that doesn't give you any idea that your data is actually written. Just because you want high-performance numbers, why not write to /dev/null. It's fast as hell.	S1
00:02:13,042 - 00:02:14,990	 Does /dev/null support sharding?	S2
00:02:14,990 - 00:02:23,855	 Holy shit. For my own mental health, I'm going to assume you're just messing with me and aren't actually retarded? Do you even know what a shard is?	S1
00:02:23,855 - 00:02:28,449	 Shards are the secret ingredient in the web scale sauce. They just work.	S2
00:02:28,449 - 00:02:32,633	 Please tell me you don't actually make a living in a technology field.	S1
00:02:32,633 - 00:02:35,882	 I'm a web programmer.	S2
00:02:35,882 - 00:03:38,980	 As of this moment, I officially resign from my job as software engineer and will take up work on the farm shoveling pig shit and administering annual suppositories to sick horses because that will be 1,000 times more tolerable than being in the same industry as deep shits like you. You read the latest post on highscalability.com and think you're a fucking Google architect and powered slogans slogans like web scale and sharding, but you have no idea what the fuck you are talking about. You're going to blow some project to hell because you get wordy playing with software like it's a sex doll. Relational databases have been around since the fucking '70s and are some of the most mature technology you can find. Yet somehow, everything needs to be reinvented because Google and Amazon post some white papers. If you need to build a globally distributed search engine that manages petabytes of data, fine, build your own database. But if you are like 99.9% of companies, you can probably get by very well with something like MySQL and maybe Memcache.	S1
00:03:38,980 - 00:03:43,083	 [Read disk?] will kick Memcache's ass. It's so fast and scalable.	S2
00:03:43,083 - 00:03:55,435	 Right now, I'm thinking of how much fun it will be to castrate my first bull down on the farm. I cannot wait to cut off the testicles of a 3,000 pound raging bull as it tries to kick my [heden?].	S1
00:03:55,435 - 00:04:01,314	 MongoDB is a document database that doesn't need joins. It uses MapReduce.	S2
00:04:01,314 - 00:04:12,020	 Now, I'm cleaning assistant of chicken shits, but I don't care because I don't have to listen to the NoSQL fanboys reciting the feature list of their favorite schema free database.	S1
00:04:12,020 - 00:04:18,118	 By writing to memory map files, MongoDB can improve its right throughput by a factor of 10.	S2
00:04:18,118 - 00:04:45,041	 What the fuck? Let's abandon transactions, consistency, durability, and pin our mission critical data to a table and give it a night it will never forget. I mean, who cares what we store as long as we do it quickly. Oh, sorry, that's right. I'm on the farm, now suffocating from the stench of 1,000 cow farts, but it smells like roses to me because I am nowhere near this moronic conversation.	S1
00:04:45,041 - 00:04:49,299	 MongoDB uses atomic modifiers for a contention-free performance.	S2
00:04:49,299 - 00:05:11,718	 Now I've contracted more [inaudible] from cleaning cow stalls, and I'm then bleeding out my asshole. I will be dead soon, but that is a welcome relief. I will never have to witness the collapse of the world economy because NoSQL radicals talked financial institutions into abandoning perfectly good data stores because they didn't support distributed fucking MapReduce.	S1
00:05:11,718 - 00:05:17,905	 MongoDB stores files of any size without complicating your stack.	S2
00:05:17,905 - 00:05:35,620	 Thank you for your questions. This presentation is over, and I'm fucking off to the farm to start my new career.	S1
